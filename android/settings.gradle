// android/settings.gradle

pluginManagement { // <-- THIS MUST BE THE VERY FIRST BLOCK
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    // This makes plugins from @react-native/gradle-plugin resolvable by ID
    // if they are applied using the plugins {} block in build.gradle.
    // It also makes the included build's artifacts available.
    includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')"].execute(null, rootDir).text.trim()).getParentFile().toString())
}

// Apply the React Native settings plugin.
// This plugin is used to configure the build for React Native projects.
apply from: new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../../../react-native-gradle-plugin/src/main/settings/settings-plugin.gradle")
applySettingsPlugin(settings)

// Apply Expo-specific Gradle utilities.
// This script provides helper methods like useExpoModules and applyExpoProperties.
apply from: new File(["node", "--print", "require.resolve('@expo/gradle-utils/package.json')"].execute(null, rootDir).text.trim(), "../../../gradle-utils.gradle")

// Apply project-specific build properties from expo-build-properties.json.
// This allows for easier configuration of native build properties.
applyExpoProperties(settings)

// --- Dev Client specific setup - include if you use expo-dev-client ---
// If you are using expo-dev-client, the following line applies its specific Gradle configurations.
def devClientGradle = new File(["node", "--print", "require.resolve('expo-dev-client/package.json')"].execute(null, rootDir).text.trim(), "../android/expo-dev-client.gradle")
if (devClientGradle.exists()) {
    apply from: devClientGradle
}
// --- End Dev Client specific setup ---

// Include the main application project.
include ':app'

// Apply Expo modules autolinking.
// This MUST be called after 'include ":app"' and after any plugins
// (like expo-dev-client) that might provide modules or need to be configured first.
useExpoModules(settings)

// Set the root project name.
// Based on previous error logs, the project name is 'Chatgpt'.
rootProject.name = 'Chatgpt'

// Standard dependency resolution for the project
// This block should come after pluginManagement and initial plugin applications.
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        // React Native Local Maven repository
        maven {
            url "$rootDir/../node_modules/react-native/android"
        }
        // JSC Android Local Maven repository
        maven {
            url "$rootDir/../node_modules/jsc-android/dist"
        }
        // JitPack (if needed by any dependencies)
        // maven { url 'https://www.jitpack.io' }
    }
    // React Native Version Catalog (if your project uses it)
    def rnLibsVersionsToml = new File(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile(), "gradle/libs.versions.toml")
    if (rnLibsVersionsToml.exists()) {
        versionCatalogs {
            reactAndroidLibs {
                from(files(rnLibsVersionsToml.getAbsolutePath()))
            }
        }
    } else {
        // This println is fine if the file genuinely doesn't exist for your RN version
        // println "INFO: React Native libs.versions.toml not found, skipping version catalog setup in settings.gradle."
    }
}

// If you have other custom native modules included as separate projects, you would list them here,
// typically after 'include ":app"' and before or after 'useExpoModules' depending on their nature.
// e.g.
// include ':my-custom-library'
// project(':my-custom-library').projectDir = new File(rootProject.projectDir, '../node_modules/my-custom-library/android')
